<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerfront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Changable Variables
persuasion = 10;
armourcooldown = 240; //the amount of time it takes before your armour regenerates
global.player_attacking = false;
global.weaponstate = NONE;
global.vhealth = 5;  //The player health
global.armour = 2;   //the player armour
global.playerlevel = 1; // the player's ingame level
global.amb = false;
global.inside = false;
swing_sound = true;
depth = 10;
global.money = 10;
///Initialise Variables
val = "empty";
hsp = 0;
vsp = 0;
dodge_cooldown = 0;
normal_speed = 1.17654447; //Speed that player moves
dodge_max_cooldown = 1; //Cooldown for dodging in seconds
dodge_multiplier = 10; //Multiplier for move velocity while dodging
splash = true;  //Allows the splash animation to appear
splash_sound = true;    //Allows the splash sound to play
sploosh_sound = true;    //Allows the water_walk sound to play
global.worldpos_x = obj_player.x;   //x coordinate of player in the world room
global.worldpos_y = obj_player.y;   //y coordinate of player in the world room

//audio_sound_gain(snd_ambient_swamp, -10, 10);
/*audio_play_sound(snd_ambient_swamp,5,true); Plays the ambient swamp sound
(Will make it play ambient sounds according to the enviroment) */

if(room = room0)
{
    obj_player.x = global.worldpos_x;
    obj_player.y = global.worldpos_y;
}

global.travel = true;   //Allows the player to travel between rooms

attacking_sprite = "spr_attack_back or spr_attack_front or spr_attack_left or spr_attack_right";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>splash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.weaponstate = NONE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.armour++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.paused</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

var current_speed = normal_speed;

if (dodge_cooldown &gt; 0)
{
    dodge_cooldown--;
}
else
{
    if (keyboard_check(vk_shift))
    {
        dodge_cooldown = room_speed * dodge_max_cooldown;
        current_speed *= dodge_multiplier;
    }
}

if (keyboard_check(ord('W'))) vsp += -current_speed;
if (keyboard_check(ord('S'))) vsp +=  current_speed;
if (keyboard_check(ord('D'))) hsp +=  current_speed;
if (keyboard_check(ord('A'))) hsp += -current_speed;

for (i = 0; i &lt; abs(hsp); i++)
{
    //Check for collision
    if (!collision_circle(x + (sign(hsp) * 0.4), y, sprite_width / 2, obj_solid, 1, 1))
    {
        x += sign(hsp) * 0.4;
    }
    else
    {
        hsp = 0;
        break;
    }
}

for (i = 0; i &lt; abs(vsp); i++)
{
    //Check for collision
    if (!collision_circle(x, y + (sign(vsp) * 0.4), sprite_width / 2, obj_solid, 1, 1))
    {
        y += sign(vsp) * 0.4;
    }
    else
    {
        vsp = 0;
        break;
    }
}

hsp = hsp * 0.88;
vsp = vsp * 0.88;

if (hsp &lt; 1 &amp;&amp; hsp &gt; -1) hsp = 0;
if (vsp &lt; 1 &amp;&amp; vsp &gt; -1) vsp = 0;


//sprite direction
//image_angle = point_direction(x, y, mouse_x, mouse_y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat
angle = -1;

if (keyboard_check_pressed(ord('I')))
{
    angle = 0;
}
if (keyboard_check_pressed(ord('J')))
{
    angle = 100;
}
if (keyboard_check_pressed(ord('K')))
{
    angle = 200;
}
if (keyboard_check_pressed(ord('L')))
{
    angle = 300;
}

if (angle != -1)
{
    if (angle &gt; -45 and angle &lt; 45)
    {
        sprite_index = spr_attack_back;
        instance_create(x,y,obj_col_back);
    }
    
    if (angle &gt; 45 and angle &lt; 135)
    {
        sprite_index = spr_attack_left;
        instance_create(x,y,obj_col_left);
    }
    
    if (angle &gt; 135 and angle &lt; 225)
    {
        sprite_index = spr_attack_front;
        instance_create(x,y,obj_col_front);
    }
    
    if (angle &gt; 225 and angle &lt; 315)
    {
        sprite_index = spr_attack_right;
        instance_create(x,y,obj_col_right);
    }
    
    if(angle &lt; 0)
    {
        angle = 360 + angle;
    }
    
    global.player_attacking = true;
    
    if (swing_sound = true)
    {
        audio_play_sound(snd_swing,20,false);
        swing_sound = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc
if(splash_sound = false and !place_meeting(x,y,obj_water))
{
    splash_sound = true;
}

if (global.vhealth &lt;= 0) {
    game_restart();
}

if (global.traveling &amp;&amp; global.portal_used_destination_room == room)
{
    x = global.portal_used_destination_x;
    y = global.portal_used_destination_y;
    global.traveling = false;
}
if (global.armour &lt; 2 &amp;&amp; global.armour &gt; 0 &amp;&amp; alarm[0] &lt;= 0)
{
alarm[0] = armourcooldown;
}

depth = -20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Index

if(global.player_attacking = true)
{
    image_speed = 0.1;
}

if(global.player_attacking = false)
{
    image_speed = 0.075;
    
    if(keyboard_check(ord("S")))
    {
        sprite_index = spr_playerfront_w;
    }
    
    if(vsp = 0 and hsp = 0)
    {
        sprite_index = spr_playerfront;
    }
    
    if(keyboard_check(ord("W")))
    {
        sprite_index = spr_playerback_w;
    }
    
    if(keyboard_check(ord("D")))
    {
        sprite_index = spr_playerright_w;
    }
    
    if(keyboard_check(ord("A")))
    {
        sprite_index = spr_playerleft_w;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact
var interactables;
var found_nearby_object = false;
if (keyboard_check_pressed(ord('E')))
{
    var nearby_object_count = 0;
    for (var i = 0; i &lt; instance_number(obj_interactable); i++)
    {
        var interactable_id = instance_find(obj_interactable, i);
        if (interactable_id != noone &amp;&amp; distance_to_object(interactable_id) &lt; 64)
        {
            found_nearby_object = true;
            interactables[nearby_object_count] = interactable_id;
            nearby_object_count++;
        }
    }

    if (found_nearby_object)
    {
        while (true)
        {
            var swaps = 0;
            for (var i = 1; i &lt; nearby_object_count; i++)
            {
                if (interactables[i - 1].priority &gt; interactables[i].priority)
                {
                    swaps++;
                    var temp = interactables[i];
                    interactables[i] = interactables[i - 1];
                    interactables[i - 1] = temp;
                }
            }
            if (swaps == 0)
            {
                break;
            }
        }
        with (interactables[0])
        {
            script_execute(interactables[0].interact_script);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Systems

//Camping
if global.hour &gt;= 6
{
    if (keyboard_check_pressed(ord('T'))) 
    {
        
    }
}

/*if(sprite_index != attacking_sprite)
{
    global.player_attacking = false;
}*/

//Inventory
if(keyboard_check_pressed(ord("T")))
{
    for (i = 0; i &lt; ds_list_size(global.inventory); i++)
    {
        val = ds_list_find_value(global.inventory,0);
        instance_create(x,y,val);
        ds_list_delete(global.inventory,0);
        //instance_create(x,y,ds_list_find_value(global.inventory,0));
    }
}
show_debug_message(depth);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_water">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(splash = true and (hsp != 0 or vsp != 0))
{
    //instance_create(x,y + 32,obj_splash);
    instance_create(x,y + 32,obj_ripple);
    splash = false;
    alarm[11] = 15;
    sploosh_sound = choose(true,false);
    
    if(sploosh_sound = true)
    {
        audio_play_sound(choose(snd_waterwalk1,snd_waterwalk2,snd_waterwalk3,snd_waterwalk4,snd_waterwalk5,snd_waterwalk6,snd_waterwalk7,snd_waterwalk8,snd_waterwalk9,snd_waterwalk10),10,false);
    }
}

if(splash_sound = true)
{
    audio_play_sound(snd_splash1,30,false);
    splash_sound = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.blocking = false)
{
        if (other.attack_cooldown &lt;= 0)
    {
        damageplayer(other.dmg)
        other.attack_cooldown = room_speed;
        hsp += other.hsp;
        vsp += other.vsp;
    }
    
    if(place_meeting(x,y,obj_skeleton))
    {
        if(obj_skeleton.sprite_index = spr_skeleattack_left)
        {
            damageplayer_half(other.dmg)
            other.attack_cooldown = room_speed;
            hsp += other.hsp;
            vsp += other.vsp;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.paused</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.weaponstate == CHARGING)
{
    global.weaponstate = RELEASING;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.paused</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (global.weaponstate == NONE)
{
    global.weaponstate = CHARGING;
    instance_create(x, y, obj_steel_shortsword);
}*/
global.attack_col = false;

var angle = point_direction(x, y, mouse_x, mouse_y) - 90;

if (angle &gt; -45 and angle &lt; 45)
{
    sprite_index = spr_attack_back;
    instance_create(x,y,obj_col_back);
}

if (angle &gt; 45 and angle &lt; 135)
{
    sprite_index = spr_attack_left;
    instance_create(x,y,obj_col_left);
}

if (angle &gt; 135 and angle &lt; 225)
{
    sprite_index = spr_attack_front;
    instance_create(x,y,obj_col_front);
}

if (angle &gt; 225 and angle &lt; 315)
{
    sprite_index = spr_attack_right;
    instance_create(x,y,obj_col_right);
}

if(angle &lt; 0)
{
    angle = 360 + angle;
}

global.player_attacking = true;

if(swing_sound = true)
{
    audio_play_sound(snd_swing,20,false);
    swing_sound = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var angle = point_direction(x, y, mouse_x, mouse_y) - 90;

if (angle &gt; -45 and angle &lt; 45)
{
    sprite_index = spr_attack_back;
    instance_create(x,y,obj_col_back);
    global.blocking = true;
}

if (angle &gt; 45 and angle &lt; 135)
{
    sprite_index = spr_attack_left;
    instance_create(x,y,obj_col_left);
    global.blocking = true;
}

if (angle &gt; 135 and angle &lt; 225)
{
    sprite_index = spr_attack_front;
    instance_create(x,y,obj_col_front);
    global.blocking = true;
}

if (angle &gt; 225 and angle &lt; 315)
{
    sprite_index = spr_attack_right;
    instance_create(x,y,obj_col_right);
    global.blocking = true;
}

if(angle &lt; 0)
{
    angle = 360 + angle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index = spr_attack_front or spr_attack_back or spr_attack_left or spr_attack_right and global.player_attacking = true)
{
    global.player_attacking = false;
    swing_sound = true;
    if(instance_exists(obj_col_back)){instance_destroy(obj_col_back);}
    if(instance_exists(obj_col_front)){instance_destroy(obj_col_front);}
    if(instance_exists(obj_col_left)){instance_destroy(obj_col_left);}
    if(instance_exists(obj_col_right)){instance_destroy(obj_col_right);}
    
    switch(sprite_index)
    {
        case spr_attack_front: sprite_index = spr_playerfront; break;
        case spr_attack_back: sprite_index = spr_playerback; break;
        case spr_attack_left: sprite_index = spr_playerleft; break;
        case spr_attack_right: sprite_index = spr_playerright; break;
    }
}

if(global.blocking = true)
{
    global.blocking = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.armour &lt; 2 or global.vhealth &lt; 5)
{
    draw_healthbar(20,680,250,660,global.armour * 50, c_black, c_gray,c_gray,0,true,true);
    draw_healthbar(20,720,250,700,global.vhealth * 20,c_black,c_red,c_red,0,true,true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x + 32,y - 32,global.inventory);
//draw_text(x+32,y,global.attack_col);

draw_self();

for (i = 0; i &lt; ds_list_size(global.inventory); i++)
{
    draw_text(x, y + i * string_height(global.inventory[| i]), global.inventory[| i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
