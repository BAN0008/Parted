<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>obj_slimesmall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables
randomize();
image_speed = .1;
jump_cooldown = 0;
hsp = 0;
vsp = 0;

jump_force = 20; //Speed and power behind each jump
jump_max_cooldown = 1.5; //Seconds between jumps
view_distance = 0; //Distance that slime can see in pixels. 0 for infinite
jump_accuracy = 128; //The smaller the value the more accurate the slime will be
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if (jump_cooldown &gt; 0)
{
    jump_cooldown--;
}
else
{
    if (!collision_line(x,y, obj_player.x, obj_player.y, obj_solid, 0, 1))
    {
        var vx = (obj_player.x - x) + irandom_range(-jump_accuracy, jump_accuracy);
        var vy = (obj_player.y - y) + irandom_range(-jump_accuracy, jump_accuracy);
        var length = sqrt((vx * vx) + (vy * vy));
        if (view_distance &lt;= 0 || length &lt; view_distance)
        {
            jump_cooldown = room_speed * jump_max_cooldown;
            hsp = (vx / length) * jump_force;
            vsp = (vy / length) * jump_force;
        }
    }
}

for (i = 0; i &lt; abs(hsp); i++)
{
    //Check for collision
    if (true)
    {
        x += sign(hsp);
    }
    else
    {
        hsp = 0;
        break;
    }
}

for (i = 0; i &lt; abs(vsp); i++)
{
    //Check for collision
    if (true)
    {
        y += sign(vsp);
    }
    else
    {
        vsp = 0;
        break;
    }
}

hsp = hsp * 0.85;
vsp = vsp * 0.85;

if (hsp &lt; 1 &amp;&amp; hsp &gt; -1) hsp = 0;
if (vsp &lt; 1 &amp;&amp; vsp &gt; -1) vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
