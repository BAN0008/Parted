<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.25;
global.portals = ds_list_create();
global.travel = true;
global.traveling = false;
global.paused = false;
global.activequest = "empty";
global.completedquests = ds_list_create();
alarm[0] = 120;
global.weather = 1; //0 = Clear, 1 = Rain, 2 = Storm, 3 = Snow, 4 = Dust Storm
global.hour = 1;
alarm[1] = 5000;
global.trees = "obj_oak1";
global.amb = false;
global.inside = false;  //Whether the player is inside or not
global.inventory = ds_list_create();
global.objective = obj_krenkus;

if (!directory_exists(program_directory + "Books"))
{
    directory_create(program_directory + "Books");
}

//instance_create(0,0,obj_rain);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Books

global.ragnartheded = "Aww mate, Ragnar the Ded is# Fuckin' sick!";

var ragnar;
ragnar = file_text_open_write(program_directory + 'Ragnar_the_Dead');
file_text_write_string(ragnar, 'Oke');
file_text_close(ragnar);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.hour &lt;= 12 
{
    global.hour ++;
    alarm[1] = 5000;
}
else if global.hour = 12 
{
    global.hour --;
    alarm[1] = 5000;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.travel = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_escape))
{
    if (global.paused == false)
    {
        global.paused = true;
    }
    else
    {
        global.paused = false;
    }
}
/*if (room = rm_swamphouse1)
{
    if (global.activequest = "krenkusslime")
    {
        show_debug_message(instance_number(obj_slimesmall))
        if !(instance_exists(obj_slimesmall))
        {
        show_debug_message(global.activequest)
            global.activequest = "complete";
        }
        else
        {
            show_debug_message("x: " + string(obj_slimesmall.x));
            show_debug_message("y: " + string(obj_slimesmall.y));
        }
    }
}
*/ 
/*
if(keyboard_check(ord("v")))    //Toggles Rain
{
    if(global.weather = 0)
    {
        global.weather = 1;
    }
    if(global.weather = 1)
    {
        global.weather = 0;
    }
}

if(global.weather = 0)
{
    effect_clear();
}

if(global.weather = 1)
{
    effect_create_above(ef_rain,0,0,1,c_gray);
} */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ambient Noises
if(global.amb = false)
{
    switch(global.weather)
    {
        case 0: 
            audio_play_sound(snd_ambforest,20,true);
            audio_stop_sound(snd_ambrain);
            audio_stop_sound(snd_ambrain_int);
            global.amb = true;
            break;
            
        case 1: 
            if(global.inside = false)
            {
                audio_play_sound(snd_ambrain,20,true);
                audio_stop_sound(snd_ambforest);
                audio_stop_sound(snd_ambrain_int);
            }
            if(global.inside = true)
            {
                audio_play_sound(snd_ambrain_int,20,true);
                audio_stop_sound(snd_ambforest);
                audio_stop_sound(snd_ambrain);
            }
            global.amb = true;
            break;
    }
}
if(room = rm_betalobby)
{
    global.inside = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Inventory
if (global.paused)
{
    draw_set_colour(c_black);
    draw_rectangle(0, 0, 80 * 9, 80 * 9, false);
    for (ix = 0; ix &lt; 8; ix++)
    {
        for (iy = 0; iy &lt; 8; iy++)
        {
            draw_sprite(spr_inventory_slot, -1, (80 * (ix + 1)), (80 * (iy + 1)));
        }
    }
    for (i = 0; i &lt; ds_list_size(global.inventory); i++)
    {
        dx = i % 8;
        dx++;
        dy = floor(i / 8);
        dy++;
        draw_sprite_stretched(object_get_sprite(global.inventory[|i]), -1, dx * 80, dy * 80, 48, 48);
    }
    draw_set_colour(c_white);
    draw_text(16, 16, "Inventory");
    if (mouse_check_button_pressed(mb_left))
    {
        item_no = (floor((mouse_x - 80) / 80) + (floor((mouse_y - 80) / 80) * 8));
        if (ds_list_size(global.inventory) &gt; item_no)
        {
            temp_object = instance_create(-100, -100, global.inventory[|item_no]);
            if (temp_object.can_be_used)
            {
                script_execute(temp_object.use_script);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weather
texture_set_interpolation(false);

if(global.weather = 1)
{
    if(global.inside = false)
    {
        draw_set_alpha(0.75);
        rain = draw_sprite_stretched(spr_rain,-1,0,0,display_get_gui_width(),display_get_gui_height());
        //rain.depth = -20;
        draw_set_alpha(1);
    }
}

if(global.weather = 3)
{ 
    draw_set_alpha(0.5);
    snow = draw_sprite_stretched(spr_snow,-1,0,0,display_get_gui_width(),display_get_gui_height());
    //snow.depth = -20;
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//day night cycle
col = make_colour_rgb(9, 14, 38); 
draw_set_alpha(global.hour/15);
draw_set_colour(col);
draw_rectangle(0,0,room_width,room_height,0);
draw_set_alpha(1);

/*Torchlight
draw_set_blend_mode(bm_add);
draw_set_color(c_white);
draw_set_alpha(0.2);
draw_circle(obj_player.x,obj_player.y,128,false);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
