<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_skeleton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables
randomize();
image_speed = .1;
jump_cooldown = 0;
hsp = 0;
vsp = 0;
vhealth = 5;
dmg = 1;
dmg_cool = false;   //Cooldown for damage
attacking = false;  //Whether the object is attacking or not

jump_force = 20; //Speed and power behind each jump
jump_max_cooldown = 1.5; //Seconds between jumps
view_distance = 0; //Distance that slime can see in pixels. 0 for infinite
jump_accuracy = 128; //The smaller the value the more accurate the slime will be
splash = true;  //Allows the splash animation to appear
splash_sound = true;    //Allows the splash sound to play
sploosh_sound = true    //Allows the water_walk sound to play
quest_true = false;  //Whether the object is related to a quest
quest = "empty";    //The quest the object is related to
enemystate = "wandering" // the current state of the enemy
global.creaturelevel = 2;  //BEREN SET YOUR FUCKING VARIABLES SO THAT SHIT WORKS!!!
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>splash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dmg_cool = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
/*if (jump_cooldown &gt; 0)
{
    jump_cooldown--;
}
else
{
    if (!collision_line(x,y, obj_player.x, obj_player.y, obj_solid, 0, 1) &amp;&amp; distance_to_object(obj_player) &lt; 640)
    {
        enemystate = "attacking"
        var vx = (obj_player.x - x) + irandom_range(-jump_accuracy, jump_accuracy);
        var vy = (obj_player.y - y) + irandom_range(-jump_accuracy, jump_accuracy);
        var length = sqrt((vx * vx) + (vy * vy));
        audio_play_sound(choose(snd_slime1,snd_slime2,snd_slime3),30,false);
        if (view_distance &lt;= 0 || length &lt; view_distance)
        {
            jump_cooldown = room_speed * jump_max_cooldown  + irandom_range(-30, 30);
            hsp = (vx / length) * jump_force;
            vsp = (vy / length) * jump_force;
        }
    }
    else
    {
        hsp = choose(-1, -0.5, 0.5, 1) * 15;
        vsp = choose(-1, -0.5, 0.5, 1) * 15;
        jump_cooldown = room_speed * jump_max_cooldown + irandom_range(-30, 30);
    }
}*/


for (i = 0; i &lt; abs(hsp); i++)
{
    //Check for collision
    if (!collision_circle(x + sign(hsp), y, sprite_width / 2, obj_solid, 1, 1))
    {
        x += sign(hsp);
    }
    else
    {
        hsp = 0;
        break;
    }
}

for (i = 0; i &lt; abs(vsp); i++)
{
    //Check for collision
    if (!collision_circle(x, y + sign(vsp), sprite_width / 2, obj_solid, 1, 1))
    {
        y += sign(vsp);
    }
    else
    {
        vsp = 0;
        break;
    }
}

hsp = hsp * 0.85;
vsp = vsp * 0.85;

if (hsp &lt; 1 &amp;&amp; hsp &gt; -1) hsp = 0;
if (vsp &lt; 1 &amp;&amp; vsp &gt; -1) vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc
if(splash_sound = false and !place_meeting(x,y,obj_water))
{
    splash_sound = true;
}

if(vhealth &lt;= 0 and quest_true = true)
{
    global.activequest = quest;
}

if(hsp &gt; 0)
{
    sprite_index = spr_skelewalk_right;
}

if(hsp &lt; 0)
{
    sprite_index = spr_skelewalk_left;
}

if(hsp = 0 and vsp = 0)
{
    sprite_index = spr_skeleton;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking

if(distance_to_object(obj_player) &lt; 128)
{
    attacking = true;
    if(sprite_index = spr_skelewalk_right)
    {
        sprite_index = spr_skeleattack_right;
    }
    else
    {
        sprite_index = spr_skeleattack_left;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Movement
case GUARDING:
        if (x != start_x || y != start_y &amp;&amp; amp; !path_exists(gpath))
        {
            gpath = gen_path(grid, x, y, start_x, start_y);
            path_start(gpath, 4, path_action_stop, true);
        }
        else
        {
            if (path_exists(gpath))
            {
                path_delete(gpath);
            }
        }
        if (distance_to_object(obj_player) &lt; lt; 500 &amp;&amp; amp; !collision_line(x + (sprite_width / 2), y + (sprite_width / 2), obj_player.x + (obj_player.sprite_width / 2), obj_player.y + (obj_player.sprite_height / 2), obj_wall, 0, 1))
        {
            show_debug_message("CHASING");
            state = CHASING;
            gpath = gen_path(grid, x, y, obj_player.x, obj_player.y);
            path_start(gpath, 4, path_action_stop, true);
            //show_debug_message("bi");
        }
        drawbar = false;
        break;
    case CHASING:
        if (!collision_line(x + (sprite_width / 2), y + (sprite_width / 2), obj_player.x + (obj_player.sprite_width / 2), obj_player.y + (obj_player.sprite_height / 2), obj_wall, 0, 1))
        {
            path_delete(gpath);
            gpath = gen_path(grid, x, y, obj_player.x, obj_player.y);
            path_start(gpath, 4, path_action_stop, true);
        }
        else
        {
            if (path_exists(gpath))
            {
                path_end();
                //show_debug_message("ima kms");
                path_delete(gpath);
            }
            lastx = obj_player.x;
            lasty = obj_player.y;
            gpath = gen_path(grid, x, y, lastx, lasty);
            path_start(gpath, 4, path_action_stop, true);
            alarm[0] = room_speed * 10;
            state = SEARCHING;
            show_debug_message("SEARCHING");
        }
        
        drawbar = true;
        break;
    case SEARCHING:
        if (distance_to_object(obj_player) &amp;lt; 500 &amp;amp;&amp;amp; !collision_line(x + (sprite_width / 2), y + (sprite_width / 2), obj_player.x + (obj_player.sprite_width / 2), obj_player.y + (obj_player.sprite_height / 2), obj_wall, 0, 1))
        {
            state = CHASING;
            gpath = gen_path(grid, x, y, obj_player.x, obj_player.y);
            path_start(gpath, 4, path_action_stop, true);
            show_debug_message("CHASING2");
        }
        drawbar = true;
        break;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_water">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(splash = true and (hsp != 0 or vsp != 0))
{
    instance_create(x,y,obj_splash);
    instance_create(x,y,obj_ripple);
    splash = false;
    alarm[11] = 5;
    sploosh_sound = choose(true,false);
    
    if(sploosh_sound = true)
    {
        audio_play_sound(choose(snd_waterwalk1,snd_waterwalk2,snd_waterwalk3,snd_waterwalk4,snd_waterwalk5,snd_waterwalk6,snd_waterwalk7,snd_waterwalk8,snd_waterwalk9,snd_waterwalk10),10,false);
    }
}

if(splash_sound = true)
{
    audio_play_sound(snd_splash1,30,false);
    splash_sound = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_steel_shortsword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gib = instance_create(x,y,obj_slimegib);
gib.direction = random_range(0,360);
gib.speed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.player_attacking = true and dmg_cool = false)
{
    vhealth -= 1;
    dmg_cool = true;
    alarm[2] = 30;
    //audio_play_sound(snd_slime1,20,false);       
    vsp = choose(5,-5);
    hsp = choose(5,-5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index = spr_skeleattack_left or sprite_index = spr_skeleattack_right)
{
    attacking = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pc = (vhealth * 20);
draw_healthbar(x - 30,y - 35,x + 30,y - 30,pc,c_black,c_red,c_red,0,true,true);

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
